//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\a\Desktop\Interpreter\CODEterpreter\CODEterpreter\InterpreterGrammar\Code.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CODEterpreter.InterpreterGrammar {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="CodeParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface ICodeVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantExpression([NotNull] CodeParser.ConstantExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] CodeParser.ParenthesizedExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>notBoolExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotBoolExpression([NotNull] CodeParser.NotBoolExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] CodeParser.IdentifierExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>newLineExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNewLineExpression([NotNull] CodeParser.NewLineExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>colonFuncExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColonFuncExpression([NotNull] CodeParser.ColonFuncExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryExpression([NotNull] CodeParser.BinaryExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalExpression([NotNull] CodeParser.LogicalExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>booleanExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanExpression([NotNull] CodeParser.BooleanExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>concatenateExpression</c>
	/// labeled alternative in <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConcatenateExpression([NotNull] CodeParser.ConcatenateExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] CodeParser.ProgramContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.lines"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLines([NotNull] CodeParser.LinesContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.ifBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfBlock([NotNull] CodeParser.IfBlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.elseIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseIfBlock([NotNull] CodeParser.ElseIfBlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.blockLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockLine([NotNull] CodeParser.BlockLineContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] CodeParser.BlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.whileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileBlock([NotNull] CodeParser.WhileBlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.inWhileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInWhileBlock([NotNull] CodeParser.InWhileBlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] CodeParser.DeclarationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclarations([NotNull] CodeParser.DeclarationsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.terminalDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerminalDeclaration([NotNull] CodeParser.TerminalDeclarationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] CodeParser.AssignmentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.assignments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignments([NotNull] CodeParser.AssignmentsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.colonFunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColonFunc([NotNull] CodeParser.ColonFuncContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] CodeParser.ConstantContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] CodeParser.ExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.binaryOperation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryOperation([NotNull] CodeParser.BinaryOperationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.logicalOperation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOperation([NotNull] CodeParser.LogicalOperationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.booleanOperation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanOperation([NotNull] CodeParser.BooleanOperationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CodeParser.concatenateOperation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConcatenateOperation([NotNull] CodeParser.ConcatenateOperationContext context);
}
} // namespace CODEterpreter.InterpreterGrammar
