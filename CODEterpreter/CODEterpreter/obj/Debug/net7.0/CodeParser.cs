//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\a\Desktop\Interpreter\CODEterpreter\CODEterpreter\InterpreterGrammar\Code.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CODEterpreter.InterpreterGrammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CodeParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, BEGIN=20, END=21, IF=22, ELSE=23, BEGINIF=24, ENDIF=25, 
		BEGINWHILE=26, ENDWHILE=27, DATATYPE=28, DOLLARSIGNCARRIAGE=29, ASSIGN=30, 
		COLON=31, BOOLEANLITERAL=32, INTEGERLITERAL=33, FLOATLITERAL=34, CHARLITERAL=35, 
		STRINGLITERAL=36, WS=37, NEWLINE=38, COLONFUNCTION=39, IDENTIFIER=40, 
		COMMENT=41;
	public const int
		RULE_program = 0, RULE_lines = 1, RULE_ifBlock = 2, RULE_elseIfBlock = 3, 
		RULE_blockLine = 4, RULE_block = 5, RULE_whileBlock = 6, RULE_inWhileBlock = 7, 
		RULE_declaration = 8, RULE_declarations = 9, RULE_terminalDeclaration = 10, 
		RULE_assignment = 11, RULE_assignments = 12, RULE_colonFunc = 13, RULE_constant = 14, 
		RULE_expression = 15, RULE_binaryOperation = 16, RULE_logicalOperation = 17, 
		RULE_booleanOperation = 18, RULE_concatenateOperation = 19;
	public static readonly string[] ruleNames = {
		"program", "lines", "ifBlock", "elseIfBlock", "blockLine", "block", "whileBlock", 
		"inWhileBlock", "declaration", "declarations", "terminalDeclaration", 
		"assignment", "assignments", "colonFunc", "constant", "expression", "binaryOperation", 
		"logicalOperation", "booleanOperation", "concatenateOperation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'WHILE'", "','", "'+'", "'-'", "'NOT'", "'*'", "'/'", 
		"'%'", "'AND'", "'OR'", "'>'", "'<'", "'>='", "'<='", "'=='", "'<>'", 
		"'&'", "'BEGIN CODE'", "'END CODE'", "'IF'", "'ELSE'", "'BEGIN IF'", "'END IF'", 
		"'BEGIN WHILE'", "'END WHILE'", null, "'$'", "'='", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "BEGIN", "END", "IF", 
		"ELSE", "BEGINIF", "ENDIF", "BEGINWHILE", "ENDWHILE", "DATATYPE", "DOLLARSIGNCARRIAGE", 
		"ASSIGN", "COLON", "BOOLEANLITERAL", "INTEGERLITERAL", "FLOATLITERAL", 
		"CHARLITERAL", "STRINGLITERAL", "WS", "NEWLINE", "COLONFUNCTION", "IDENTIFIER", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Code.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(CodeParser.BEGIN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(CodeParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(CodeParser.NEWLINE, i);
		}
		public ITerminalNode END() { return GetToken(CodeParser.END, 0); }
		public ITerminalNode Eof() { return GetToken(CodeParser.Eof, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public LinesContext[] lines() {
			return GetRuleContexts<LinesContext>();
		}
		public LinesContext lines(int i) {
			return GetRuleContext<LinesContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(BEGIN);
			State = 41; Match(NEWLINE);
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DATATYPE) {
				{
				{
				State = 42; declaration();
				State = 43; Match(NEWLINE);
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 53;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << IF) | (1L << COLONFUNCTION) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 50; lines();
				}
				}
				State = 55;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 56; Match(END);
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 57; Match(NEWLINE);
				}
				}
				State = 62;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 63; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(CodeParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(CodeParser.NEWLINE, i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ColonFuncContext[] colonFunc() {
			return GetRuleContexts<ColonFuncContext>();
		}
		public ColonFuncContext colonFunc(int i) {
			return GetRuleContext<ColonFuncContext>(i);
		}
		public IfBlockContext[] ifBlock() {
			return GetRuleContexts<IfBlockContext>();
		}
		public IfBlockContext ifBlock(int i) {
			return GetRuleContext<IfBlockContext>(i);
		}
		public WhileBlockContext[] whileBlock() {
			return GetRuleContexts<WhileBlockContext>();
		}
		public WhileBlockContext whileBlock(int i) {
			return GetRuleContext<WhileBlockContext>(i);
		}
		public LinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lines; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterLines(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitLines(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinesContext lines() {
		LinesContext _localctx = new LinesContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_lines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 69;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 65; assignment();
						}
						break;
					case COLONFUNCTION:
						{
						State = 66; colonFunc();
						}
						break;
					case IF:
						{
						State = 67; ifBlock();
						}
						break;
					case T__2:
						{
						State = 68; whileBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 71; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 75;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(CodeParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(CodeParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(CodeParser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(CodeParser.ELSE, 0); }
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(IF);
			State = 78; Match(T__0);
			State = 79; expression(0);
			State = 80; Match(T__1);
			State = 81; Match(NEWLINE);
			State = 82; block();
			State = 86;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 83; Match(NEWLINE);
				State = 84; Match(ELSE);
				State = 85; elseIfBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(CodeParser.NEWLINE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_elseIfBlock);
		try {
			State = 91;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(NEWLINE);
				State = 89; block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockLineContext : ParserRuleContext {
		public LinesContext[] lines() {
			return GetRuleContexts<LinesContext>();
		}
		public LinesContext lines(int i) {
			return GetRuleContext<LinesContext>(i);
		}
		public BlockLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterBlockLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitBlockLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockLineContext blockLine() {
		BlockLineContext _localctx = new BlockLineContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_blockLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << IF) | (1L << COLONFUNCTION) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 93; lines();
				}
				}
				State = 98;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode BEGINIF() { return GetToken(CodeParser.BEGINIF, 0); }
		public ITerminalNode NEWLINE() { return GetToken(CodeParser.NEWLINE, 0); }
		public BlockLineContext blockLine() {
			return GetRuleContext<BlockLineContext>(0);
		}
		public ITerminalNode ENDIF() { return GetToken(CodeParser.ENDIF, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(BEGINIF);
			State = 100; Match(NEWLINE);
			State = 101; blockLine();
			State = 102; Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(CodeParser.NEWLINE, 0); }
		public InWhileBlockContext inWhileBlock() {
			return GetRuleContext<InWhileBlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T__2);
			State = 105; Match(T__0);
			State = 106; expression(0);
			State = 107; Match(T__1);
			State = 108; Match(NEWLINE);
			State = 109; inWhileBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InWhileBlockContext : ParserRuleContext {
		public ITerminalNode BEGINWHILE() { return GetToken(CodeParser.BEGINWHILE, 0); }
		public ITerminalNode NEWLINE() { return GetToken(CodeParser.NEWLINE, 0); }
		public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		public ITerminalNode ENDWHILE() { return GetToken(CodeParser.ENDWHILE, 0); }
		public InWhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inWhileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterInWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitInWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InWhileBlockContext inWhileBlock() {
		InWhileBlockContext _localctx = new InWhileBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_inWhileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(BEGINWHILE);
			State = 112; Match(NEWLINE);
			State = 113; lines();
			State = 114; Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode DATATYPE() { return GetToken(CodeParser.DATATYPE, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(DATATYPE);
			State = 117; declarations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public TerminalDeclarationContext[] terminalDeclaration() {
			return GetRuleContexts<TerminalDeclarationContext>();
		}
		public TerminalDeclarationContext terminalDeclaration(int i) {
			return GetRuleContext<TerminalDeclarationContext>(i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; terminalDeclaration();
			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__3) {
				{
				{
				State = 120; Match(T__3);
				State = 121; terminalDeclaration();
				}
				}
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CodeParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(CodeParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TerminalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterTerminalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitTerminalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalDeclarationContext terminalDeclaration() {
		TerminalDeclarationContext _localctx = new TerminalDeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_terminalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 127; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 128; Match(IDENTIFIER);
				State = 129; Match(ASSIGN);
				State = 130; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(CodeParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; assignments();
			State = 134; Match(ASSIGN);
			State = 136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 135;
				_la = _input.La(1);
				if ( !(_la==T__4 || _la==T__5) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 138; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CodeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CodeParser.IDENTIFIER, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(CodeParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(CodeParser.ASSIGN, i);
		}
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_assignments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(IDENTIFIER);
			State = 145;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 141; Match(ASSIGN);
					State = 142; Match(IDENTIFIER);
					}
					} 
				}
				State = 147;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColonFuncContext : ParserRuleContext {
		public ITerminalNode COLONFUNCTION() { return GetToken(CodeParser.COLONFUNCTION, 0); }
		public ITerminalNode COLON() { return GetToken(CodeParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ColonFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colonFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterColonFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitColonFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColonFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColonFuncContext colonFunc() {
		ColonFuncContext _localctx = new ColonFuncContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_colonFunc);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(COLONFUNCTION);
			State = 149; Match(COLON);
			State = 158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 150; expression(0);
				State = 155;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 151; Match(T__3);
						State = 152; expression(0);
						}
						} 
					}
					State = 157;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode CHARLITERAL() { return GetToken(CodeParser.CHARLITERAL, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(CodeParser.INTEGERLITERAL, 0); }
		public ITerminalNode FLOATLITERAL() { return GetToken(CodeParser.FLOATLITERAL, 0); }
		public ITerminalNode BOOLEANLITERAL() { return GetToken(CodeParser.BOOLEANLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(CodeParser.STRINGLITERAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEANLITERAL) | (1L << INTEGERLITERAL) | (1L << FLOATLITERAL) | (1L << CHARLITERAL) | (1L << STRINGLITERAL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotBoolExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotBoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterNotBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitNotBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CodeParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewLineExpressionContext : ExpressionContext {
		public ITerminalNode DOLLARSIGNCARRIAGE() { return GetToken(CodeParser.DOLLARSIGNCARRIAGE, 0); }
		public NewLineExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterNewLineExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitNewLineExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewLineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColonFuncExpressionContext : ExpressionContext {
		public ColonFuncContext colonFunc() {
			return GetRuleContext<ColonFuncContext>(0);
		}
		public ColonFuncExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterColonFuncExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitColonFuncExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColonFuncExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryOperationContext binaryOperation() {
			return GetRuleContext<BinaryOperationContext>(0);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOperationContext logicalOperation() {
			return GetRuleContext<LogicalOperationContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BooleanOperationContext booleanOperation() {
			return GetRuleContext<BooleanOperationContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConcatenateOperationContext concatenateOperation() {
			return GetRuleContext<ConcatenateOperationContext>(0);
		}
		public ConcatenateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterConcatenateExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitConcatenateExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__4:
			case T__5:
			case BOOLEANLITERAL:
			case INTEGERLITERAL:
			case FLOATLITERAL:
			case CHARLITERAL:
			case STRINGLITERAL:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 164;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__4 || _la==T__5) {
					{
					State = 163;
					_la = _input.La(1);
					if ( !(_la==T__4 || _la==T__5) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 166; constant();
				}
				break;
			case T__0:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 167; Match(T__0);
				State = 168; expression(0);
				State = 169; Match(T__1);
				}
				break;
			case T__6:
				{
				_localctx = new NotBoolExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 171; Match(T__6);
				State = 172; expression(8);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 173; Match(IDENTIFIER);
				}
				break;
			case DOLLARSIGNCARRIAGE:
				{
				_localctx = new NewLineExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 174; Match(DOLLARSIGNCARRIAGE);
				}
				break;
			case COLONFUNCTION:
				{
				_localctx = new ColonFuncExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 175; colonFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 196;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 194;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 178;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 179; binaryOperation();
						State = 180; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 182;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 183; logicalOperation();
						State = 184; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 187; booleanOperation();
						State = 188; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new ConcatenateExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 190;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 191; concatenateOperation();
						State = 192; expression(2);
						}
						break;
					}
					} 
				}
				State = 198;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryOperationContext : ParserRuleContext {
		public BinaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterBinaryOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitBinaryOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOperationContext binaryOperation() {
		BinaryOperationContext _localctx = new BinaryOperationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_binaryOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperationContext : ParserRuleContext {
		public LogicalOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterLogicalOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitLogicalOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperationContext logicalOperation() {
		LogicalOperationContext _localctx = new LogicalOperationContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_logicalOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = _input.La(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperationContext : ParserRuleContext {
		public BooleanOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterBooleanOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitBooleanOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperationContext booleanOperation() {
		BooleanOperationContext _localctx = new BooleanOperationContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_booleanOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenateOperationContext : ParserRuleContext {
		public ConcatenateOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenateOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterConcatenateOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitConcatenateOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatenateOperationContext concatenateOperation() {
		ConcatenateOperationContext _localctx = new ConcatenateOperationContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_concatenateOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3+\xD2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v\x2\x3\x2"+
		"\a\x2\x36\n\x2\f\x2\xE\x2\x39\v\x2\x3\x2\x3\x2\a\x2=\n\x2\f\x2\xE\x2@"+
		"\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3H\n\x3\x3\x3\x3\x3\x6\x3"+
		"L\n\x3\r\x3\xE\x3M\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4Y\n\x4\x3\x5\x3\x5\x3\x5\x5\x5^\n\x5\x3\x6\a\x6\x61\n\x6\f\x6"+
		"\xE\x6\x64\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\a\v}\n\v"+
		"\f\v\xE\v\x80\v\v\x3\f\x3\f\x3\f\x3\f\x5\f\x86\n\f\x3\r\x3\r\x3\r\x5\r"+
		"\x8B\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\x92\n\xE\f\xE\xE\xE\x95\v\xE"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x9C\n\xF\f\xF\xE\xF\x9F\v\xF\x5\xF"+
		"\xA1\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\xA7\n\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xB3\n\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xC5\n\x11\f\x11\xE\x11"+
		"\xC8\v\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x15\x2\x2\x3 \x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\a\x3"+
		"\x2\a\b\x3\x2\"&\x4\x2\a\b\n\f\x3\x2\r\xE\x3\x2\xF\x14\xD7\x2*\x3\x2\x2"+
		"\x2\x4K\x3\x2\x2\x2\x6O\x3\x2\x2\x2\b]\x3\x2\x2\x2\n\x62\x3\x2\x2\x2\f"+
		"\x65\x3\x2\x2\x2\xEj\x3\x2\x2\x2\x10q\x3\x2\x2\x2\x12v\x3\x2\x2\x2\x14"+
		"y\x3\x2\x2\x2\x16\x85\x3\x2\x2\x2\x18\x87\x3\x2\x2\x2\x1A\x8E\x3\x2\x2"+
		"\x2\x1C\x96\x3\x2\x2\x2\x1E\xA2\x3\x2\x2\x2 \xB2\x3\x2\x2\x2\"\xC9\x3"+
		"\x2\x2\x2$\xCB\x3\x2\x2\x2&\xCD\x3\x2\x2\x2(\xCF\x3\x2\x2\x2*+\a\x16\x2"+
		"\x2+\x31\a(\x2\x2,-\x5\x12\n\x2-.\a(\x2\x2.\x30\x3\x2\x2\x2/,\x3\x2\x2"+
		"\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x37\x3"+
		"\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x36\x5\x4\x3\x2\x35\x34\x3\x2\x2\x2"+
		"\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38:\x3\x2"+
		"\x2\x2\x39\x37\x3\x2\x2\x2:>\a\x17\x2\x2;=\a(\x2\x2<;\x3\x2\x2\x2=@\x3"+
		"\x2\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\x41\x3\x2\x2\x2@>\x3\x2\x2\x2\x41"+
		"\x42\a\x2\x2\x3\x42\x3\x3\x2\x2\x2\x43H\x5\x18\r\x2\x44H\x5\x1C\xF\x2"+
		"\x45H\x5\x6\x4\x2\x46H\x5\xE\b\x2G\x43\x3\x2\x2\x2G\x44\x3\x2\x2\x2G\x45"+
		"\x3\x2\x2\x2G\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IJ\a(\x2\x2JL\x3\x2\x2\x2K"+
		"G\x3\x2\x2\x2LM\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2N\x5\x3\x2\x2\x2"+
		"OP\a\x18\x2\x2PQ\a\x3\x2\x2QR\x5 \x11\x2RS\a\x4\x2\x2ST\a(\x2\x2TX\x5"+
		"\f\a\x2UV\a(\x2\x2VW\a\x19\x2\x2WY\x5\b\x5\x2XU\x3\x2\x2\x2XY\x3\x2\x2"+
		"\x2Y\a\x3\x2\x2\x2Z[\a(\x2\x2[^\x5\f\a\x2\\^\x5\x6\x4\x2]Z\x3\x2\x2\x2"+
		"]\\\x3\x2\x2\x2^\t\x3\x2\x2\x2_\x61\x5\x4\x3\x2`_\x3\x2\x2\x2\x61\x64"+
		"\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\v\x3\x2\x2\x2\x64"+
		"\x62\x3\x2\x2\x2\x65\x66\a\x1A\x2\x2\x66g\a(\x2\x2gh\x5\n\x6\x2hi\a\x1B"+
		"\x2\x2i\r\x3\x2\x2\x2jk\a\x5\x2\x2kl\a\x3\x2\x2lm\x5 \x11\x2mn\a\x4\x2"+
		"\x2no\a(\x2\x2op\x5\x10\t\x2p\xF\x3\x2\x2\x2qr\a\x1C\x2\x2rs\a(\x2\x2"+
		"st\x5\x4\x3\x2tu\a\x1D\x2\x2u\x11\x3\x2\x2\x2vw\a\x1E\x2\x2wx\x5\x14\v"+
		"\x2x\x13\x3\x2\x2\x2y~\x5\x16\f\x2z{\a\x6\x2\x2{}\x5\x16\f\x2|z\x3\x2"+
		"\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x15\x3\x2\x2"+
		"\x2\x80~\x3\x2\x2\x2\x81\x86\a*\x2\x2\x82\x83\a*\x2\x2\x83\x84\a \x2\x2"+
		"\x84\x86\x5 \x11\x2\x85\x81\x3\x2\x2\x2\x85\x82\x3\x2\x2\x2\x86\x17\x3"+
		"\x2\x2\x2\x87\x88\x5\x1A\xE\x2\x88\x8A\a \x2\x2\x89\x8B\t\x2\x2\x2\x8A"+
		"\x89\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x5 \x11"+
		"\x2\x8D\x19\x3\x2\x2\x2\x8E\x93\a*\x2\x2\x8F\x90\a \x2\x2\x90\x92\a*\x2"+
		"\x2\x91\x8F\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94"+
		"\x3\x2\x2\x2\x94\x1B\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x97\a)\x2\x2"+
		"\x97\xA0\a!\x2\x2\x98\x9D\x5 \x11\x2\x99\x9A\a\x6\x2\x2\x9A\x9C\x5 \x11"+
		"\x2\x9B\x99\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E"+
		"\x3\x2\x2\x2\x9E\xA1\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\x98\x3\x2\x2"+
		"\x2\xA0\xA1\x3\x2\x2\x2\xA1\x1D\x3\x2\x2\x2\xA2\xA3\t\x3\x2\x2\xA3\x1F"+
		"\x3\x2\x2\x2\xA4\xA6\b\x11\x1\x2\xA5\xA7\t\x2\x2\x2\xA6\xA5\x3\x2\x2\x2"+
		"\xA6\xA7\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xB3\x5\x1E\x10\x2\xA9\xAA"+
		"\a\x3\x2\x2\xAA\xAB\x5 \x11\x2\xAB\xAC\a\x4\x2\x2\xAC\xB3\x3\x2\x2\x2"+
		"\xAD\xAE\a\t\x2\x2\xAE\xB3\x5 \x11\n\xAF\xB3\a*\x2\x2\xB0\xB3\a\x1F\x2"+
		"\x2\xB1\xB3\x5\x1C\xF\x2\xB2\xA4\x3\x2\x2\x2\xB2\xA9\x3\x2\x2\x2\xB2\xAD"+
		"\x3\x2\x2\x2\xB2\xAF\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB1\x3\x2\x2"+
		"\x2\xB3\xC6\x3\x2\x2\x2\xB4\xB5\f\x6\x2\x2\xB5\xB6\x5\"\x12\x2\xB6\xB7"+
		"\x5 \x11\a\xB7\xC5\x3\x2\x2\x2\xB8\xB9\f\x5\x2\x2\xB9\xBA\x5$\x13\x2\xBA"+
		"\xBB\x5 \x11\x6\xBB\xC5\x3\x2\x2\x2\xBC\xBD\f\x4\x2\x2\xBD\xBE\x5&\x14"+
		"\x2\xBE\xBF\x5 \x11\x5\xBF\xC5\x3\x2\x2\x2\xC0\xC1\f\x3\x2\x2\xC1\xC2"+
		"\x5(\x15\x2\xC2\xC3\x5 \x11\x4\xC3\xC5\x3\x2\x2\x2\xC4\xB4\x3\x2\x2\x2"+
		"\xC4\xB8\x3\x2\x2\x2\xC4\xBC\x3\x2\x2\x2\xC4\xC0\x3\x2\x2\x2\xC5\xC8\x3"+
		"\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7!\x3\x2\x2\x2\xC8"+
		"\xC6\x3\x2\x2\x2\xC9\xCA\t\x4\x2\x2\xCA#\x3\x2\x2\x2\xCB\xCC\t\x5\x2\x2"+
		"\xCC%\x3\x2\x2\x2\xCD\xCE\t\x6\x2\x2\xCE\'\x3\x2\x2\x2\xCF\xD0\a\x15\x2"+
		"\x2\xD0)\x3\x2\x2\x2\x14\x31\x37>GMX]\x62~\x85\x8A\x93\x9D\xA0\xA6\xB2"+
		"\xC4\xC6";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CODEterpreter.InterpreterGrammar
